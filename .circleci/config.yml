version: 2

executors:
  basic:
    docker:
      - image: circleci/python:3.7.4
    working_directory: ~/repo

jobs:
  build:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          name: install deps
          command: |
            curl -sSL https://raw.githubusercontent.com/python-poetry/poetry/master/get-poetry.py | python - --version 1.1.10
            source $HOME/.poetry/env
            poetry config experimental.new-installer false
            poetry run pip install -U pip
            poetry install
      - save_cache:
          key: deps-v1-{{ .Branch }}-{{ checksum "poetry.lock" }}
          paths:
            - /home/circleci/.cache/pypoetry/virtualenvs
            - /home/circleci/.poetry
  test:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - restore_cache:
          keys:
            - deps-v1-{{ .Branch }}-{{ checksum "poetry.lock" }}
            - deps-v1-{{ .Branch }}
            - deps-v1
      - run:
          name: run tests
          command: |
            source $HOME/.poetry/env
            touch ~/.medium_creds.ini
            cd test
            poetry run python -m unittest
            poetry run pytest
      - store_artifacts:
          path: test-reports/
          destination: python_app
  publish:
    docker:
      - image: circleci/python:3.6
    steps:
      - checkout
      - run:
          name: publish to pypi
          command: |
            poetry build
            poetry publish
#  bump:
#    docker:
#      - image: circleci/python:3.6
#    steps:
#      - checkout
#      - run:
#          name: Bump version
#          command: |
#            source $HOME/.poetry/env
#            sudo apt-get update && sudo apt-get install -y git
#            git config --global user.email ""
#            git config --global user.name ""
#            poetry version patch
#            VERSION=$(poetry version -s)
#            git commit -am "[skip ci] Bump version to ${VERSION} from CircleCI"
#            git push origin master
#            git tag -a ${VERSION} -m "${VERSION}"
#            git push --follow-tags
workflows:
  version: 2
  test:
    jobs:
      - build
      - test:
          requires:
            - build
#      - bump:
#          filters:
#            branches:
#              only:
#                - master
#      - publish:
#          filters:
#            branches:
#              only:
#                - master
